The ft5406 module needed an edit to import and use Queue instead of queue. It is installed on the Pi in the RADIO ONLY!
DIRECTORY: ~/multitouch/library       # this likely needs cloning and so I'll copy it ... with the edits for python 2



SSH is set up, a new password needs issuing for security reasons.
The general outline is done. The specifics of the radio sound and how many if any?
TEST PLAN:
==========
All modules which pip-ed are pip-ed
There are likely some syntax issues
The placing of a background alpha blend is an issue with .jpg files. (.png?)
There is likely a switch needing for removing the fullscreen border (if any)
There is some issue in touch to screen coordination. The offsets will have to be tested and back filled.



State machine enumeration
The calibration of the LCD is missing the top of the screen. I think it's capacitive to the brass fittings.



The following https://github.com/pimoroni/python-multitouch driver is beta but allows the following example code
[code]
import ft5406
ts = ft5406.Touchscreen()

while True:
    for touch in ts.poll():
        print(touch.slot, touch.id, touch.valid, touch.x, touch.y)

[/code]

tkinter looks the best option for GUI fullscreen

[code]
import sys
if sys.version_info[0] == 2:  # Just checking your Python version to import Tkinter properly.
    from Tkinter import *
else:
    from tkinter import *


class Fullscreen_Window:

    def __init__(self):
        self.tk = Tk()
        self.tk.attributes('-zoomed', True)  # This just maximizes it so we can see the window. It's nothing to do with fullscreen.
        self.frame = Frame(self.tk)
        self.frame.pack()
        self.state = False
        self.tk.bind("<F11>", self.toggle_fullscreen)
        self.tk.bind("<Escape>", self.end_fullscreen)

    def toggle_fullscreen(self, event=None):
        self.state = not self.state  # Just toggling the boolean
        self.tk.attributes("-fullscreen", self.state)
        return "break"

    def end_fullscreen(self, event=None):
        self.state = False
        self.tk.attributes("-fullscreen", False)
        return "break"

if __name__ == '__main__':
    w = Fullscreen_Window()
    w.tk.mainloop()
[/code]